// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model TemplateData {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  semester   Int
  items      TemplateItem[]
  template   Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String         @db.ObjectId
}

model TemplateItem {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  type           TemplateDataType @default(CORE)
  templateData   TemplateData     @relation(fields: [templateDataId], references: [id], onDelete: Cascade)
  templateDataId String           @db.ObjectId
}

model Template {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  templateData TemplateData[]
}

model Profile {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String?
  user   User     @relation(fields: [userId], references: [id])
  userId String   @unique @db.ObjectId
  majors String[]
  minors String[]
}

model Plan {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @default(now()) @map("updated_at")
  semesters    Semester[]
  User         User?                @relation(fields: [userId], references: [id])
  userId       String?              @db.ObjectId
  requirements DegreeRequirements[]
}

model DegreeRequirements {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  // Do derived attributes for classes later
  major    String
  bypasses Bypass[]
  plan     Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId   String   @db.ObjectId
}

model Bypass {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  courseCode           String
  requirement          String
  hours                Int
  degreeRequirements   DegreeRequirements @relation(fields: [degreeRequirementsId], references: [id])
  degreeRequirementsId String             @db.ObjectId
}

model Semester {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String // TODO: convert code to enum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   String[] // Store course catalog codes
  plan      Plan?    @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    String?  @db.ObjectId
}

type SemesterType {
  semester SemesterCode
  year     Int
}

enum SemesterCode {
  f
  s
  u
}

model Credit {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  courseCode   String
  semesterCode SemesterType?
  userId       String        @db.ObjectId
  user         User?         @relation(fields: [userId], references: [id])
}

model AcademicDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  onboardingComplete Boolean   @default(false)
  credit             Credit[]
  image              String?
  accounts           Account[] // Wait can a user have multiple accounts?
  sessions           Session[]
  profile            Profile?
  plans              Plan[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TemplateDataType {
  CORE
  OPTIONAL
}
